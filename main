#-------------------------------------------------------------------------------
# Name:        1D Particle Physics
# Purpose:
#
# Author:      Jimmy Albracht
#
# Created:     22/01/2014
# Copyright:   (c) Jimmy Albracht 2014
# Licence:
#-------------------------------------------------------------------------------

import pygame

class wall(object):
    """That shit ain't movin'."""
    def __init__(self):
        self.pos = 0.0
        self.nextCollision = 99
        self.velocity = 0.0


class particle(object):
    """Inherits from wall class. Now with added physics."""
    def __init__(self):
        self.mass = 0.0
        self.pos = 0.0
        self.velocity = 0.0
        self.kinetic = 0.0 #Ek = .5 * mass * velocity**2
        self.nextCollision = 0.0 #This variable is not what it seems;
                           #other collisions often happen before this prediction.
    def updatePos(self, dT):
        self.pos += self.velocity * dT
    def updateKE(self, dT):
        self.kinetic = .5 * self.mass * self.velocity**2

print("There are 3 point-particles in a 1-d system.\n\
m1, m2, m3\n\
There are two walls.")

width = 1340
height = 740

#create a list of wall and particle objects
m0 = wall()
m1 = particle()
m2 = particle()
m3 = particle()
m4 = wall()
system = [m0,m1,m2,m3,m4]

m1PosList = []
m2PosList = []
m3PosList = []
posLists = [0, m1PosList, m2PosList, m3PosList, 0]

m1KEList = []
m2KEList = []
m3KEList = []
KELists = [0, m1KEList, m2KEList, m3KEList, 0]


def proceed(t, tLimit):
    #calculate time to next collision
    for i in range(0,4):
        if((system[i+1].velocity >= system[i].velocity)): #they are moving apart
            system[i].nextCollision = 99
        else:
            dist = system[i+1].pos - system[i].pos
            relVel = system[i].velocity - system[i+1].velocity
            system[i].nextCollision = dist / relVel #Time until the next collsion
            if(dist == 0.0):
                system[i].nextCollision = 99
    dT = min(system[0].nextCollision, system[1].nextCollision, system[2].nextCollision, system[3].nextCollision)
    #update positions of all particles
    if (dT > 0.0005):
        dT = 0.0005
    if(t + dT > tLimit):
        dT = tLimit - t
        for i in range(1,4):
            posLists[i].append((int(((t+dT)/timeLimit)*(width-40))+20, int(height/2-20-((system[i].pos/length)*(height/2-100)))))
            KELists[i].append([int(((t+dT)/timeLimit)*(width-40))+20,KELists[i][len(KELists[i])-1][1]])
            KELists[i].append([int(((t+dT)/timeLimit)*(width-40))+20, height - 60 - int(system[i].kinetic)])
        return t+ dT
    for i in range(1,4):
        system[i].updatePos(dT)

    #update velocities and kinetic energy of colliding particles
    for i in range(0,4):
        if(system[i+1].pos == system[i].pos):
            if((i != 0) and (i != 3)):
                p1v = system[i].velocity
                p1m = system[i].mass
                p2v = system[i+1].velocity
                p2m = system[i+1].mass
                system[i].velocity = -p1v + 2 * ((p1m * p1v + p2m * p2v)/(p1m + p2m))
                system[i+1].velocity = -p2v + 2 * ((p1m * p1v + p2m * p2v)/(p1m + p2m))
                posLists[i].append((int(((t+dT)/timeLimit)*(width-40))+20, int(height/2-20 - ((system[i].pos/length)*(height/2-100)))))
                posLists[i+1].append((int(((t+dT)/timeLimit)*(width-40))+20, int(height/2-20 - ((system[i+1].pos/length)*(height/2-100)))))
                system[i].updateKE(dT+t)
                system[i+1].updateKE(dT+t)
                KELists[i].append([int(((t+dT)/timeLimit)*(width-40))+20,KELists[i][len(KELists[i])-1][1]])
                KELists[i].append([int(((t+dT)/timeLimit)*(width-40))+20, height - 60 - int(system[i].kinetic)])
                KELists[i+1].append([int(((t+dT)/timeLimit)*(width-40))+20,KELists[i+1][len(KELists[i+1])-1][1]])
                KELists[i+1].append([int(((t+dT)/timeLimit)*(width-40))+20, height - 60 - int(system[1].kinetic)])

            elif(i == 0):
                system[1].velocity *= -1 #perfectly elastic collision with left wall
                posLists[1].append((int(((t+dT)/timeLimit)*(width-40))+20, int(height/2-20 - ((system[1].pos/length)*(height/2-100)))))
                system[1].updateKE(dT+t)
                KELists[1].append([int(((t+dT)/timeLimit)*(width-40))+20,KELists[1][len(KELists[1])-1][1]])
                KELists[1].append([int(((t+dT)/timeLimit)*(width-40))+20, height - 60 - int(system[1].kinetic)])
            else:
                system[3].velocity *= -1 #perfectly elastic collision with right wall
                posLists[3].append((int(((t+dT)/timeLimit)*(width-40))+20, int(height/2 - 60 - ((system[3].pos/length)*(height/2-100)))))
                system[3].updateKE(dT+t)
                KELists[3].append([int(((t+dT)/timeLimit)*(width-40))+20,KELists[3][len(KELists[3])-1][1]])
                KELists[3].append([int(((t+dT)/timeLimit)*(width-40))+20, height - 60 - int(system[3].kinetic)])
    return t + dT

#repeatedly ask user for variables, until all variables are valid numbers.
while True:
    length = float(input("Enter distance (in m) between the walls:"))
    if(length>0):
        system[4].pos = length
        break
    print("That was not positive.")

#iterate through particles to let user set their initial variables
for i in range(1,4):
    while True:
        mass = float(input("Enter mass (in kg) of m"+str(i)+":"))
        if(mass>0):
            system[i].mass = mass
            break
        print("That was not positive.")
    while True:
        location = float(input(("Enter location (in m) of m"+str(i)+":")))
        if((location>m0.pos) and (location<m4.pos)):
            system[i].pos = location
            break
        print("That was not between 0 and ", m4.pos, " .")
    velocity = float(input(("Enter velocity (in m/s) of m"+str(i)+":")))
    system[i].velocity = velocity

posLists[1] = [(20, int(height/2-20 - ((system[1].pos/length)*(height/2-60))))]
posLists[2] = [(20, int(height/2-20 - ((system[2].pos/length)*(height/2-60))))]
posLists[3] = [(20, int(height/2-20 - ((system[3].pos/length)*(height/2-60))))]
system[1].updateKE(0)
system[2].updateKE(0)
system[3].updateKE(0)
KELists[1] = [[20, height - 60 - int(system[1].kinetic)]]
KELists[2] = [[20, height - 60 - int(system[2].kinetic)]]
KELists[3] = [[20, height - 60 - int(system[3].kinetic)]]

timeLimit = float(input("time (in s):"))

#Time begins at zero seconds
time = 0.0

#########################################################
#the simulation proceeds until the time-limit is reacehd#
#########################################################
pygame.display.init()
width2 = 1000
height2 = 20
screen = pygame.display.set_mode((width2, height2))
while(time<timeLimit):
    pygame.event.pump()
    if pygame.key.get_pressed()[pygame.K_ESCAPE]:
        break
    screen.fill((0,0,0))
    time = proceed(time, timeLimit)#if the next collision is later than timeLimit,
                                   #then this function advances time until equal to
                                   #timeLimit. Otherwise, time is advanced to
                                   #the next collision.
    pygame.draw.circle(screen, (255, 0, 0), (int((system[1].pos/length)*width2), int(height2/2)), 1)
    pygame.draw.circle(screen, (0, 255, 0), (int((system[2].pos/length)*width2), int(height2/2)), 1)
    pygame.draw.circle(screen, (0, 0, 255), (int((system[3].pos/length)*width2), int(height2/2)), 1)
    pygame.display.flip()
    print("time into simulation: ", time)
pygame.display.quit()
#####################
#display the results#
#####################
for i in range(1,4):
    print("Position of m", i, " at ", time, " seconds is ", system[i].pos)
input("Press enter to view plots.")
pygame.display.init()
pygame.font.init()
timesFontObject = pygame.font.SysFont("Times New Roman", 24, True) # True is for bold
smallTimesFontObject = pygame.font.SysFont("Times New Roman", 12, False)
tempS = timesFontObject.render("Position vs. Time", False, (255,255,255), (30,30,30))
tempS2 = timesFontObject.render("Kinetic Energy vs. Time", False, (255,255,255), (30,30,30))
tempS3 = smallTimesFontObject.render(str(timeLimit), False, (255,255,255), (0,0,0))
tempS4 = smallTimesFontObject.render("0", False, (255,255,255), (0,0,0))
tempS5 = smallTimesFontObject.render(str(length), False, (255,255,255), (0,0,0))
tempS6 = smallTimesFontObject.render(str(height/2 - 60), False, (255,255,255), (0,0,0))
screen = pygame.display.set_mode((width, height))
screen.fill((0,0,0))
pygame.draw.rect(screen, (30, 30, 30), (20,40,width-40,height/2-60), 0)
pygame.draw.rect(screen, (30, 30, 30), (20,height/2+20,width-40,height/2-60), 0)
pygame.draw.line(screen, (255, 255, 255), (20, 40), (20,height/2-20), 1)
pygame.draw.line(screen, (255, 255, 255), (21, height/2-20), (width-20, height/2-20), 1)
pygame.draw.line(screen, (255, 255, 255), (20, height/2+20), (20, height-40), 1)
pygame.draw.line(screen, (255, 255, 255), (21, height-40), (width-20, height-40), 1)
for i in range(int(timeLimit)):
    pygame.draw.line(screen, (255, 255, 255), (int(i/timeLimit*(width-40))+20,40), (int((i/int(timeLimit)*(width-40)))+20,height/2-16), 1)
    pygame.draw.line(screen, (255, 255, 255), (int(i/timeLimit*(width-40))+20,height/2+20), (int((i/int(timeLimit)*(width-40)))+20,height-36), 1)
for i in range(int(length*4)):
    pygame.draw.line(screen, (255, 255, 255), (16,height/2 - int((i/(length*4))*((height/2)-60))-20), (width-20,height/2 - int((i/(length*4))*((height/2)-60))-20), 1)
    pygame.draw.line(screen, (255, 255, 255), (16,height - int((i/(length*4))*((height/2)-60))-40), (width-20,height - int((i/(length*4))*((height/2)-60))-40), 1)
pygame.draw.line(screen, (255,255,255), (width-20,height/2-20), (width-20,height/2-16), 1)
pygame.draw.line(screen, (255,255,255), (width-20,height-40), (width-20, height-36), 1)
screen.blit(tempS, (width/2 - tempS.get_width()/2,30 - tempS.get_height()/2))
screen.blit(tempS2, (width/2 - tempS2.get_width()/2,height/2+10 - tempS2.get_height()/2))
screen.blit(tempS3, (int(width - 20 - tempS3.get_width()/2),int(height/2 - tempS3.get_height()/2)))
screen.blit(tempS4, (int(30 - tempS3.get_width()/2),int(height/2 - tempS4.get_height()/2)))
screen.blit(tempS3, (int(width - 20 - tempS3.get_width()/2),int(height - 20 - tempS3.get_height()/2)))
screen.blit(tempS4, (int(30 - tempS3.get_width()/2),int(height - 20 - tempS4.get_height()/2)))
screen.blit(tempS4, (10 - tempS4.get_width()/2, height/2 - 25 - tempS4.get_height()/2))
screen.blit(tempS4, (10 - tempS4.get_width()/2, height - 35 - tempS4.get_height()/2))
screen.blit(tempS5, (10 - tempS5.get_width()/2, 40 - tempS5.get_height()/2))
screen.blit(tempS6, (0, height/2 + 20 - tempS6.get_height()/2))
pygame.draw.lines(screen, (255,0,0), False, posLists[1])
pygame.draw.lines(screen, (0,255,0), False, posLists[2])
pygame.draw.lines(screen, (0,0,255), False, posLists[3])
for i in range(len(KELists[1])):
    KELists[1][i][0]-=1
for i in range(len(KELists[3])):
    KELists[3][i][0]+=1
pygame.draw.lines(screen, (255,0,0), False, KELists[1])
pygame.draw.lines(screen, (0,255,0), False, KELists[2])
pygame.draw.lines(screen, (0,0,255), False, KELists[3])
pygame.display.flip()
pygame.image.save(screen,"plots.png")
print("'plots.png' image was saved in same directory as 'Michael'sHW.py' file.")
print("Press escape to close program.")
while(True):
    pygame.event.pump()
    if pygame.key.get_pressed()[pygame.K_ESCAPE]:
        break
pygame.font.quit()
pygame.display.quit()
